{
    "contents" : "---\ntitle: \"Assignment 7\"\nauthor: \"T Xu\"\ndate: \"Wednesday, October 01, 2014\"\noutput: html_document\n---\nLoading in your data set\n--------------------------------\nThis lab introduces you to portfolio theory. Let us get started by loading the returns_df data set into your workspace. This data set contains the returns on the Boeing and Microsoft stock from 1992-07-01 up to 2000-10-01.\nYou can find the data set at http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData.\n```{r}\n# Load relevant packages\nlibrary(\"PerformanceAnalytics\")\nlibrary(\"zoo\")\nsource(\"portfolio.r\", keep.source=FALSE)\n# Load the data\nload(url(\"http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData\"))\n# Explore the data set\nhead(returns_df)\ntail(returns_df)\n```\nThe CER model\n----------------------------\nA quick recap on the constant expected return model (CER) as seen in the previous chapter: \n$Rit=μi+ϵit, t=1,…,T\nϵit ~ iid N(0,σ2i)\ncov(ϵ_it,ϵ_jt)=σij$,\nwhere Rit denotes the continuously compounded return on asset i, now with i= Microsoft and Boeing.\nAs discussed in the previous chapter, the parameters μi, σi and ρij are unknown to us. However, you can estimate the model parameters for both the Boeing and the Microsoft stock based on the data in returns_df.\n```{r}\n# The returns_df data is preloaded in your workspace\n\n# Estimate the parameters: multivariate\nmu_hat_annual = apply(returns_df,2,mean)*12   \nsigma2_annual = apply(returns_df,2,var)*12   \nsigma_annual = sqrt(sigma2_annual)\ncov_mat_annual = cov(returns_df)*12 \ncov_hat_annual = cov(returns_df)[1,2]*12    \nrho_hat_annual = cor(returns_df)[1,2]\n\n# The annual estimates of the CER model parameters for Boeing and Microsoft\nmu_boeing = mu_hat_annual[\"rboeing\"]\nmu_msft = mu_hat_annual[\"rmsft\"]\nsigma2_boeing =  sigma2_annual[\"rboeing\"]\nsigma2_msft = sigma2_annual[\"rmsft\"]\nsigma_boeing = sigma_annual[\"rboeing\"]\nsigma_msft = sigma_annual[\"rmsft\"]\nsigma_boeing_msft = cov_hat_annual\nrho_boeing_msft = rho_hat_annual\n```\n\nA portfolio of Boeing and Microsoft stock\n----------------------\nIn this exercise, you will create a set of portfolios that consist of Microsoft and Boeing stock. The goal is to visualize all these portfolios in a plot with on the x-axis the portfolio standard deviation and on the y-axis the expected return on the portfolio.\nThe code on the right specifies the vector boeing_weights. Every element of the vector boeing_weights represents the proportion of Boeing stocks for that portfolio. The set of weights for Boeing that you will consider ranges from -1, -0.9, ..., up to 2.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\n\n# The ratio Boeing stock vs Microsoft stock (adds up to 1)\nboeing_weights = seq(from=-1, to=2, by=0.1)\nmsft_weights = seq(from=2, to=-1, by=-0.1)\n\n# Portfolio parameters\nmu_portfolio =  boeing_weights*mu_boeing + msft_weights*mu_msft\n\nsigma2_portfolio =  boeing_weights^2 * sigma2_boeing + msft_weights^2 * sigma2_msft + 2*boeing_weights*msft_weights*sigma_boeing_msft\n\nsigma_portfolio = sqrt(sigma2_portfolio)\n\n\n# Plotting the different portfolios\nplot(sigma_portfolio, mu_portfolio, type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"Microsoft\", pos=4)\n```\n\nAdding T-bills to your portfolios\n-------------------------\nAs seen in the lectures, you can potentially increase the performance of your portfolio significantly by investing in T-bills as well.\nUse an annual risk-free rate of 3% per year for the T-billand and create a set of portfolios with the T-bills and the Boeing stock as underlying assets. Again, you are allowed to take short positions in both assets.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\n\n# Annual risk-free rate of 3% per year for the T-bill\nt_bill_rate = 0.03\n\n# Ratio Boeing stocks\nboeing_weights = seq(from=-1, to=2, by=0.1)\n\n# Portfolio parameters\nmu_portfolio_boeing_bill = t_bill_rate + boeing_weights*(mu_boeing - t_bill_rate)\n\nsigma_portfolio_boeing_bill = boeing_weights*sigma_boeing\n\n# Plot previous exercise\nplot(sigma_portfolio, mu_portfolio, type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"MSFT\", pos=4)\n\n# Portfolio Combination Boeing and T-bills\npoints(sigma_portfolio_boeing_bill, mu_portfolio_boeing_bill, type=\"b\", col=\"blue\")\n\n```\nThe Sharpe Slope\n-----------------------\nHaving a value for the T-bill annual risk-free rate, you can now calculate the Sharpe slope for the Boeing stock.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\n\n# Sharp ratio Boeing\nsharp_ratio_boeing = (mu_boeing - t_bill_rate)/sigma_boeing\n```\n\nGlobal Minimum Variance Portfolio\n--------------------------------\nThe global minimum variance portfolio is the portfolio that provides you with the lowest possible portfolio volatility for a number of underlying assets. To calculate the global minimum variance portfolio for our returns_df data set, you can make use of the R function globalMin.portfolio().\nThe globalMin.portfolio() function only needs two inputs:\nThe er argument: the expected returns of the underlying assets (that is mu_hat_annual in this case).\nThe cov.mat argument: the covariance matrix of the returns (that is cov_mat_annual in this case).\nBoth mu_hat_annual and cov_mat_annual were calculated in a previous exercise and are preloaded in your workspace.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\nglobalMin.portfolio <- function(er, cov.mat)\n{\n  # Compute global minimum variance portfolio\n  #\n  # inputs:\n  # er  \t\t\tN x 1 vector of expected returns\n  # cov.mat\t\tN x N return covariance matrix\n  #\n  # output is portfolio object with the following elements\n  # call\t\t\toriginal function call\n  # er\t\t\t\tportfolio expected return\n  # sd\t\t\t\tportfolio standard deviation\n  # weights\t\tN x 1 vector of portfolio weights\n  call <- match.call()\n\n  #\n  # check for valid inputs\n  #\n  asset.names <- names(er)\n  er <- as.vector(er)\t\t\t\t\t# assign names if none exist\n  cov.mat <- as.matrix(cov.mat)\n  if(length(er) != nrow(cov.mat))\n    stop(\"invalid inputs\")\n  if(any(diag(chol(cov.mat)) <= 0))\n    stop(\"Covariance matrix not positive definite\")\n  # remark: could use generalized inverse if cov.mat is positive semi-definite\n\n  #\n  # compute global minimum portfolio\n  #\n  cov.mat.inv <- solve(cov.mat)\n  one.vec <- rep(1,length(er))\n#  w.gmin <- cov.mat.inv %*% one.vec/as.vector(one.vec %*% cov.mat.inv %*% one.vec)\n  w.gmin <- rowSums(cov.mat.inv) / sum(cov.mat.inv)\n  w.gmin <- as.vector(w.gmin)\n  names(w.gmin) <- asset.names\n  er.gmin <- crossprod(w.gmin,er)\n  sd.gmin <- sqrt(t(w.gmin) %*% cov.mat %*% w.gmin)\n  gmin.port <- list(\"call\" = call,\n\t\t    \"er\" = as.vector(er.gmin),\n\t\t    \"sd\" = as.vector(sd.gmin),\n\t\t    \"weights\" = w.gmin)\n  class(gmin.port) <- \"portfolio\"\n  gmin.port\n}\n# The global minimum variance portfolio\nglobal_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)\nglobal_min_var_portfolio\n\n# Summary of global_min_var_portfolio that takes into account the annual risk-free rate of 3% per year\nsummary(global_min_var_portfolio, risk.free=0.03)\n\n# Portfolio weights Boeing and Microsoft\nplot(global_min_var_portfolio)\n\n# Plot previous exercises\nplot(sigma_portfolio, mu_portfolio, type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"MSFT\", pos=4)\n\n# Plot the position of the global minimum variance portfolio\ntext(x=global_min_var_portfolio$sd, y=global_min_var_portfolio$er, labels=\"Global min\", pos=2)\n```\nExpected return\n-----------------------\nWhat is the expected return of the global minimum variable portfolio?\nNote that all data and CER parameters are preloaded in your workspace. Type ls() in the console to see them.\n```{r}\nsummary(global_min_var_portfolio)\n```\n\nTangency Portfolio\n---------------------------\nThe tangency portfolio is the portfolio on the efficient frontier with the highest Sharpe ratio. In this exercise you will calculate the composition of the tangency portfolio, taking into account investment options in Boeing and Microsoft stock. To do this, you will make use of the tangency.portfolio() function.\nMore specifically, tangency.portfolio() has the arguments:\ner: the expected returns (mu_hat_annual)\ncov.mat: the covariance matrix of the returns (cov_mat_annual)\nrisk.free: the risk-free rate (3% in this case).\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\ntangency.portfolio <- \nfunction(er,cov.mat,risk.free)\n{\n  # compute tangency portfolio\n  #\n  # inputs:\n  # er  \t\t\t   N x 1 vector of expected returns\n  # cov.mat\t\t   N x N return covariance matrix\n  # risk.free\t\t scalar, risk-free rate\n  #\n  # output is portfolio object with the following elements\n  # call\t\t\t  captures function call\n  # er\t\t\t\t  portfolio expected return\n  # sd\t\t\t\t  portfolio standard deviation\n  # weights\t\t N x 1 vector of portfolio weights\n  call <- match.call()\n\n  #\n  # check for valid inputs\n  #\n  asset.names <- names(er)\n  if(risk.free < 0)\n    stop(\"Risk-free rate must be positive\")\n  er <- as.vector(er)\n  cov.mat <- as.matrix(cov.mat)\n  if(length(er) != nrow(cov.mat))\n    stop(\"invalid inputs\")\n  if(any(diag(chol(cov.mat)) <= 0))\n    stop(\"Covariance matrix not positive definite\")\n  # remark: could use generalized inverse if cov.mat is positive semi-definite\n\n  #\n  # compute global minimum variance portfolio\n  #\n  gmin.port <- globalMin.portfolio(er,cov.mat)\n  if(gmin.port$er < risk.free)\n    stop(\"Risk-free rate greater than avg return on global minimum variance portfolio\")\n\n  # \n  # compute tangency portfolio\n  #\n  cov.mat.inv <- solve(cov.mat)\n  w.t <- cov.mat.inv %*% (er - risk.free) # tangency portfolio\n  w.t <- as.vector(w.t/sum(w.t))\t# normalize weights\n  names(w.t) <- asset.names\n  er.t <- crossprod(w.t,er)\n  sd.t <- sqrt(t(w.t) %*% cov.mat %*% w.t)\n  tan.port <- list(\"call\" = call,\n\t\t   \"er\" = as.vector(er.t),\n\t\t   \"sd\" = as.vector(sd.t),\n\t\t   \"weights\" = w.t)\n  class(tan.port) <- \"portfolio\"\n  tan.port\n}\n# The tangency portfolio\ntangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual,risk.free=0.03) \ntangency_portfolio\n\n# Summary of tangency_portfolio with annual risk free rate of 3%\nsummary(tangency_portfolio ,risk.free=0.03)\n\n# Portfolio weights Boeing and Microsoft\nplot(tangency_portfolio)\n```\nTangency portfolio and T-bills\n------------------------------\nIn the previous exercise, you calculated the composition of the tangency portfolio. As a second step, you create new portfolios that are a combination of T-bills and this tangency portfolio. First, you will need to compute the expected portfolio return and volatility for these portfolios. Second, your job is to create a plot of these portfolios with the volatility on the x-axis and the expected return on the y-axis.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\n\n# Annual risk-free rate of 3% per year for the T-bill\nt_bill_rate = 0.03\n\n# Set of tangency portfolio weights\ntangency_weights = seq(from=0, to=2, by=0.1)\n\n# Portfolio parameters\nmu_portfolio_tangency_bill = t_bill_rate + tangency_weights*(tangency_portfolio$er-t_bill_rate)\nsigma_portfolio_tangency_bill = tangency_weights*tangency_portfolio$sd\n\n# Plot previous exercises\nplot(sigma_portfolio, mu_portfolio, type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"MSFT\", pos=4)\n\n# Plot portfolio combinations of tangency portfolio and T-bills\ntext(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels=\"Tangency\", pos=2)\npoints(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type=\"b\", col=\"blue\", pch=16)\n```\nAn Efficient Portfolio with 30% Tangency\n-----------------------------------------\nConsider a portfolio that has 30% invested in the tangency portfolio and 70% in T-bills. Before making the final call, you want to investigate this portfolio's return and volatility in more detail. You decide to use the techniques that you learned in the previous exercises to map the portfolio in the spectrum of available portfolios.\n```{r}\n# All data and CER parameters are preloaded in your workspace.\n# Type \"ls()\" in the console to see them.\n\n# Define the portfolio ratio's\ntangency_weight = 0.3\nt_bill_weight = 1 - tangency_weight\n\n# Define the portfolio parameters\nmu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)\nsd_portfolio_efficient = tangency_weight*tangency_portfolio$sd\n\n# Plot previous exercises\nplot(sigma_portfolio, mu_portfolio, type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"MSFT\", pos=4)\ntext(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels=\"Tangency\", pos=2)\npoints(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type=\"b\", col=\"blue\", pch=16)\n\n# Plot Efficient Portfolio with 30% Tangency\npoints(sd_portfolio_efficient, mu_portfolio_efficient, type=\"p\", col=\"orange\", pch=16, cex=2)\ntext(x=sd_portfolio_efficient, y=mu_portfolio_efficient, labels=\"Efficient Portfolio with 30% Tangency\", pos=4, cex=0.75)\n```\nAn Efficient Portfolio with the SD of Boeing\n-----------------------------\nIn this final exercise, you want to find the efficient portfolio (combination of T-bills and tangency portfolio) that has the same risk (SD) as Boeing.\n```{r}\n# All data and CER parameters are preloaded in your workspace. \n# Type \"ls()\" in the console to see them. \n\n# Define the tangency portfolio ratio\ntangency_weight  = sigma_boeing/tangency_portfolio$sd\n\n# Calculate the weight of the tangency portfolio in the portfolio\nmu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)\nsd_portfolio_efficient = tangency_weight*tangency_portfolio$sd\n\n# Plot previous exercises\nplot(sigma_portfolio, mu_portfolio,bg=\"NA\", type=\"b\", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep(\"green\", 18), rep(\"red\", 13)))\ntext(x=sigma_boeing, y=mu_boeing, labels=\"Boeing\", pos=4)\ntext(x=sigma_msft, y=mu_msft, labels=\"MSFT\", pos=4)\ntext(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels=\"Tangency\", pos=2)\npoints(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type=\"b\", col=\"blue\", pch=16)\n\n# Plot Efficient Portfolio with the same risk as Boeing\npoints(sd_portfolio_efficient, mu_portfolio_efficient, type=\"p\", col=\"orange\", pch=16, cex=2)\ntext(x=sd_portfolio_efficient, y=mu_portfolio_efficient, labels=\"Efficient Portfolio with same risk as Boeing\", pos=2, cex=0.75)\n```\n\n\n",
    "created" : 1412178216341.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "527037606",
    "id" : "54BB71DA",
    "lastKnownWriteTime" : 1413408626,
    "path" : "~/GitHub/ComputationalFinanceandFinancialEconometrics/Assignment7/ProgrammingAssignment7.Rmd",
    "project_path" : "ProgrammingAssignment7.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}
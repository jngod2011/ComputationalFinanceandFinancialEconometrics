library("PerformanceAnalytics")
library("zoo")
install.packages("PerformanceAnalytics@")
install.packages("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
library("zoo")
load("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData")
?load
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
head(returns_df)
tail(returns_df)
?sd
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sqrt(sigma2_annual)
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
# The annual estimates of the CER model parameters for Boeing and Microsoft
mu_boeing = mu_hat_annual["rboeing"]
mu_msft = mu_hat_annual["rmsft"]
sigma2_boeing =  sigma2_annual["rboeing"]
sigma2_msft = sigma2_annual["rmsft"]
sigma_boeing = sigma_annual["rboeing"]
sigma_msft = sigma_annual["rmsft"]
sigma_boeing_msft = cov_hat_annual
rho_boeing_msft = rho_hat_annual
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = 0.03
# Ratio Boeing stocks
boeing_weights = seq(from=-1, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_boeing_bill = t_bill_rate + boeing_weights*(mu_boeing - t_bill_rate)
sigma_portfolio_boeing_bill = boeing_weights*sigma_boeing
# Plot previous exercise
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Portfolio Combination Boeing and T-bills
points(sigma_portfolio_boeing_bill, mu_portfolio_boeing_bill, type="b", col="blue")
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# The ratio Boeing stock vs Microsoft stock (adds up to 1)
boeing_weights = seq(from=-1, to=2, by=0.1)
msft_weights = seq(from=2, to=-1, by=-0.1)
# Portfolio parameters
mu_portfolio =  boeing_weights*mu_boeing + msft_weights*mu_msft
sigma2_portfolio =  boeing_weights^2 * sigma2_boeing + msft_weights^2 * sigma2_msft + 2*boeing_weights*msft_weights*sigma_boeing_msft
sigma_portfolio = sqrt(sigma2_portfolio)
# Plotting the different portfolios
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="Microsoft", pos=4)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = 0.03
# Ratio Boeing stocks
boeing_weights = seq(from=-1, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_boeing_bill = t_bill_rate + boeing_weights*(mu_boeing - t_bill_rate)
sigma_portfolio_boeing_bill = boeing_weights*sigma_boeing
# Plot previous exercise
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Portfolio Combination Boeing and T-bills
points(sigma_portfolio_boeing_bill, mu_portfolio_boeing_bill, type="b", col="blue")
?globalMin.portfolio()
?globalMin.portfolio
ï¼ŸglobalMin.portfolio
?globalMin.portfolio
library(portfolio)
library(portfolio.r)
source("./portfolio.r")
source("portfolio.r")
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# The global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
global_min_var_portfolio
# Summary of global_min_var_portfolio that takes into account the annual risk-free rate of 3% per year
summary(global_min_var_portfolio, risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(global_min_var_portfolio)
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Plot the position of the global minimum variance portfolio
text(x=global_min_var_portfolio$sd, y=global_min_var_portfolio$er, labels="Global min", pos=2)
?tangency_portfolio
# The tangency portfolio
tangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual,risk.free=0.03)
tangency_portfolio
# Summary of tangency_portfolio with annual risk free rate of 3%
summary(tangency_portfolio ,risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(tangency_portfolio)
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
source("portfolio.r")
globalMin.portfolio <- function(er, cov.mat)
{
# Compute global minimum variance portfolio
#
# inputs:
# er  			N x 1 vector of expected returns
# cov.mat		N x N return covariance matrix
#
# output is portfolio object with the following elements
# call			original function call
# er				portfolio expected return
# sd				portfolio standard deviation
# weights		N x 1 vector of portfolio weights
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
er <- as.vector(er)					# assign names if none exist
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("invalid inputs")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
# remark: could use generalized inverse if cov.mat is positive semi-definite
#
# compute global minimum portfolio
#
cov.mat.inv <- solve(cov.mat)
one.vec <- rep(1,length(er))
#  w.gmin <- cov.mat.inv %*% one.vec/as.vector(one.vec %*% cov.mat.inv %*% one.vec)
w.gmin <- rowSums(cov.mat.inv) / sum(cov.mat.inv)
w.gmin <- as.vector(w.gmin)
names(w.gmin) <- asset.names
er.gmin <- crossprod(w.gmin,er)
sd.gmin <- sqrt(t(w.gmin) %*% cov.mat %*% w.gmin)
gmin.port <- list("call" = call,
"er" = as.vector(er.gmin),
"sd" = as.vector(sd.gmin),
"weights" = w.gmin)
class(gmin.port) <- "portfolio"
gmin.port
}
# The global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
global_min_var_portfolio
# Summary of global_min_var_portfolio that takes into account the annual risk-free rate of 3% per year
summary(global_min_var_portfolio, risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(global_min_var_portfolio)
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Plot the position of the global minimum variance portfolio
text(x=global_min_var_portfolio$sd, y=global_min_var_portfolio$er, labels="Global min", pos=2)
```
Expected return
-----------------------
# Load relevant packages
library("PerformanceAnalytics")
library("zoo")
source("portfolio.r", keep.source=FALSE)
# Load the data
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# The returns_df data is preloaded in your workspace
# Estimate the parameters: multivariate
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sqrt(sigma2_annual)
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
# The annual estimates of the CER model parameters for Boeing and Microsoft
mu_boeing = mu_hat_annual["rboeing"]
mu_msft = mu_hat_annual["rmsft"]
sigma2_boeing =  sigma2_annual["rboeing"]
sigma2_msft = sigma2_annual["rmsft"]
sigma_boeing = sigma_annual["rboeing"]
sigma_msft = sigma_annual["rmsft"]
sigma_boeing_msft = cov_hat_annual
rho_boeing_msft = rho_hat_annual
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# The ratio Boeing stock vs Microsoft stock (adds up to 1)
boeing_weights = seq(from=-1, to=2, by=0.1)
msft_weights = seq(from=2, to=-1, by=-0.1)
# Portfolio parameters
mu_portfolio =  boeing_weights*mu_boeing + msft_weights*mu_msft
sigma2_portfolio =  boeing_weights^2 * sigma2_boeing + msft_weights^2 * sigma2_msft + 2*boeing_weights*msft_weights*sigma_boeing_msft
sigma_portfolio = sqrt(sigma2_portfolio)
# Plotting the different portfolios
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="Microsoft", pos=4)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = 0.03
# Ratio Boeing stocks
boeing_weights = seq(from=-1, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_boeing_bill = t_bill_rate + boeing_weights*(mu_boeing - t_bill_rate)
sigma_portfolio_boeing_bill = boeing_weights*sigma_boeing
# Plot previous exercise
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Portfolio Combination Boeing and T-bills
points(sigma_portfolio_boeing_bill, mu_portfolio_boeing_bill, type="b", col="blue")
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Sharp ratio Boeing
sharp_ratio_boeing = (mu_boeing - t_bill_rate)/sigma_boeing
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
globalMin.portfolio <- function(er, cov.mat)
{
# Compute global minimum variance portfolio
#
# inputs:
# er  			N x 1 vector of expected returns
# cov.mat		N x N return covariance matrix
#
# output is portfolio object with the following elements
# call			original function call
# er				portfolio expected return
# sd				portfolio standard deviation
# weights		N x 1 vector of portfolio weights
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
er <- as.vector(er)					# assign names if none exist
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("invalid inputs")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
# remark: could use generalized inverse if cov.mat is positive semi-definite
#
# compute global minimum portfolio
#
cov.mat.inv <- solve(cov.mat)
one.vec <- rep(1,length(er))
#  w.gmin <- cov.mat.inv %*% one.vec/as.vector(one.vec %*% cov.mat.inv %*% one.vec)
w.gmin <- rowSums(cov.mat.inv) / sum(cov.mat.inv)
w.gmin <- as.vector(w.gmin)
names(w.gmin) <- asset.names
er.gmin <- crossprod(w.gmin,er)
sd.gmin <- sqrt(t(w.gmin) %*% cov.mat %*% w.gmin)
gmin.port <- list("call" = call,
"er" = as.vector(er.gmin),
"sd" = as.vector(sd.gmin),
"weights" = w.gmin)
class(gmin.port) <- "portfolio"
gmin.port
}
# The global minimum variance portfolio
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
global_min_var_portfolio
# Summary of global_min_var_portfolio that takes into account the annual risk-free rate of 3% per year
summary(global_min_var_portfolio, risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(global_min_var_portfolio)
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Plot the position of the global minimum variance portfolio
text(x=global_min_var_portfolio$sd, y=global_min_var_portfolio$er, labels="Global min", pos=2)
summary(global_min_var_portfolio)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
tangency.portfolio <-
function(er,cov.mat,risk.free)
{
# compute tangency portfolio
#
# inputs:
# er  			   N x 1 vector of expected returns
# cov.mat		   N x N return covariance matrix
# risk.free		 scalar, risk-free rate
#
# output is portfolio object with the following elements
# call			  captures function call
# er				  portfolio expected return
# sd				  portfolio standard deviation
# weights		 N x 1 vector of portfolio weights
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
if(risk.free < 0)
stop("Risk-free rate must be positive")
er <- as.vector(er)
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("invalid inputs")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
# remark: could use generalized inverse if cov.mat is positive semi-definite
#
# compute global minimum variance portfolio
#
gmin.port <- globalMin.portfolio(er,cov.mat)
if(gmin.port$er < risk.free)
stop("Risk-free rate greater than avg return on global minimum variance portfolio")
#
# compute tangency portfolio
#
cov.mat.inv <- solve(cov.mat)
w.t <- cov.mat.inv %*% (er - risk.free) # tangency portfolio
w.t <- as.vector(w.t/sum(w.t))	# normalize weights
names(w.t) <- asset.names
er.t <- crossprod(w.t,er)
sd.t <- sqrt(t(w.t) %*% cov.mat %*% w.t)
tan.port <- list("call" = call,
"er" = as.vector(er.t),
"sd" = as.vector(sd.t),
"weights" = w.t)
class(tan.port) <- "portfolio"
tan.port
}
# The tangency portfolio
tangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual,risk.free=0.03)
tangency_portfolio
# Summary of tangency_portfolio with annual risk free rate of 3%
summary(tangency_portfolio ,risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(tangency_portfolio)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Annual risk-free rate of 3% per year for the T-bill
t_bill_rate = 0.03
# Set of tangency portfolio weights
tangency_weights = seq(from=0, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_tangency_bill = t_bill_rate + tangency_weights*(tangency_portfolio$er-t_bill_rate)
sigma_portfolio_tangency_bill = tangency_weights*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Plot portfolio combinations of tangency portfolio and T-bills
text(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels="Tangency", pos=2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type="b", col="blue", pch=16)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Define the portfolio ratio's
tangency_weight = 0.3
t_bill_weight = 1 - tangency_weight
# Define the portfolio parameters
mu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
text(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels="Tangency", pos=2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type="b", col="blue", pch=16)
# Plot Efficient Portfolio with 30% Tangency
points(sd_portfolio_efficient, mu_portfolio_efficient, type="p", col="orange", pch=16, cex=2)
text(x=sd_portfolio_efficient, y=mu_portfolio_efficient, labels="Efficient Portfolio with 30% Tangency", pos=4, cex=0.75)
# All data and CER parameters are preloaded in your workspace.
# Type "ls()" in the console to see them.
# Define the tangency portfolio ratio
tangency_weight  = sigma_boeing/tangency_portfolio$sd
# Calculate the weight of the tangency portfolio in the portfolio
mu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio,bg="NA", type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
text(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels="Tangency", pos=2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type="b", col="blue", pch=16)
# Plot Efficient Portfolio with the same risk as Boeing
points(sd_portfolio_efficient, mu_portfolio_efficient, type="p", col="orange", pch=16, cex=2)
text(x=sd_portfolio_efficient, y=mu_portfolio_efficient, labels="Efficient Portfolio with same risk as Boeing", pos=2, cex=0.75)
return_matrix = coredata(all_returns)
```{r}
VBLTX_prices = get.hist.quote(instrument="vbltx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
FMAGX_prices = get.hist.quote(instrument="fmagx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
SBUX_prices = get.hist.quote(instrument="sbux", start="2005-09-01",end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
# Change the class of the time index to yearmon, which is appropriate for monthly data.
# index() and as.yearmon() are functions in the zoo package
index(VBLTX_prices) = as.yearmon(index(VBLTX_prices))
index(FMAGX_prices) = as.yearmon(index(FMAGX_prices))
index(SBUX_prices) = as.yearmon(index(SBUX_prices))
# Create merged price data
all_prices = merge(VBLTX_prices, FMAGX_prices, SBUX_prices)
# Rename columns
colnames(all_prices) = c("VBLTX", "FMAGX", "SBUX")
# Calculate cc returns as difference in log prices
all_returns = diff(log(all_prices))
# Create matrix with returns
library(tseries)
VBLTX_prices = get.hist.quote(instrument="vbltx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
library(tseries)
VBLTX_prices = get.hist.quote(instrument="vbltx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
FMAGX_prices = get.hist.quote(instrument="fmagx", start="2005-09-01", end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
SBUX_prices = get.hist.quote(instrument="sbux", start="2005-09-01",end="2010-09-30", quote="AdjClose",provider="yahoo", origin="1970-01-01",compression="m", retclass="zoo")
# Change the class of the time index to yearmon, which is appropriate for monthly data.
# index() and as.yearmon() are functions in the zoo package
index(VBLTX_prices) = as.yearmon(index(VBLTX_prices))
index(FMAGX_prices) = as.yearmon(index(FMAGX_prices))
index(SBUX_prices) = as.yearmon(index(SBUX_prices))
# Create merged price data
all_prices = merge(VBLTX_prices, FMAGX_prices, SBUX_prices)
# Rename columns
colnames(all_prices) = c("VBLTX", "FMAGX", "SBUX")
# Calculate cc returns as difference in log prices
all_returns = diff(log(all_prices))
# Create matrix with returns
return_matrix = coredata(all_returns)
```
The standard error of the variances
-------------------------
# The variable return_matrix is preloaded in your workspace
# Number of observations
n_obs = dim(return_matrix)[1]
# Estimates of sigma2hat
sigma2hat_vals = apply(return_matrix, 2, var)
# Standard Error of sigma2hat
se_sigma2hat = sigma2hat_vals/sqrt(n_obs/2)
se_sigma
# Number of observations
n_obs = dim(return_matrix)[1]
# Estimates of sigma2hat
sigma2hat_vals = apply(return_matrix, 2, var)
# Standard Error of sigma2hat
se_sigma2hat = sigma2hat_vals/sqrt(n_obs/2)
se_sigma2hat
---
t.test(all_returns[,"VBLTX"])
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
# The "all_returns" zoo object is preloaded in your workspace
t.test(all_returns[,"SBUX"])
t.test(all_returns[,"VBLTX"])
t.test(all_returns[,"FMAGX"])
cor.test(x=all_returns[,"VBLTX"], y=all_returns[,"SBUX"])
cor.test(x=all_returns[,"FMAGX"], y=all_returns[,"SBUX"])
cor.test(x=all_returns[,"VBLTX"], y=all_returns[,"FMAGX"])
t.test(all_returns[,"SBUX"])
t.test(all_returns[,"VBLTX"])
t.test(all_returns[,"FMAGX"])
cor.test(x=all_returns[,"VBLTX"], y=all_returns[,"SBUX"])
cor.test(x=all_returns[,"FMAGX"], y=all_returns[,"SBUX"])
cor.test(x=all_returns[,"VBLTX"], y=all_returns[,"FMAGX"])
t.test(all_returns[,"SBUX"])
t.test(all_returns[,"VBLTX"])
t.test(all_returns[,"FMAGX"])
jarque.bera.test(all_returns[,"VBLTX"])
the returns of VBLTX
jarque.bera.test(all_returns[,"VBLTX"])
jarque.bera.test(all_returns[,"SBUX"])
jarque.bera.test(all_returns[,"FMAGX"])
library("boot")
# Function for bootstrapping sample mean:
mean_boot = function(x, idx) {
ans = mean(x[idx])
ans
}
# Construct VBLTX_mean_boot:
VBLTX_mean_boot = boot(return_matrix[,"VBLTX"], statistic = mean_boot, R=999)
# Print the class of VBLTX_mean_boot
class(VBLTX_mean_boot)
# Print VBLTX_mean_boot
VBLTX_mean_boot
# Plot bootstrap distribution and qq-plot against normal
plot(VBLTX_mean_boot)
?boot
library("boot")
# Function for bootstrapping sample mean:
mean_boot = function(x, idx) {
ans = var(x[idx])
ans
}
# Construct VBLTX_mean_boot:
VBLTX_mean_boot = boot(return_matrix[,"VBLTX"], statistic = mean_boot, R=999)
# Print the class of VBLTX_mean_boot
class(VBLTX_mean_boot)
# Print VBLTX_mean_boot
VBLTX_mean_boot
# Plot bootstrap distribution and qq-plot against normal
plot(VBLTX_mean_boot)
library("boot")
# Function for bootstrapping sample mean:
mean_boot = function(x, idx) {
ans = mean(x[idx])
ans
}
# Construct VBLTX_mean_boot:
VBLTX_mean_boot = boot(return_matrix[,"VBLTX"], statistic = mean_boot, R=999)
# Print the class of VBLTX_mean_boot
class(VBLTX_mean_boot)
# Print VBLTX_mean_boot
VBLTX_mean_boot
# Plot bootstrap distribution and qq-plot against normal
plot(VBLTX_mean_boot)

{
    "contents" : "---\ntitle: \"Assignment 5\"\nauthor: \"T Xu\"\ndate: \"Wednesday, October 01, 2014\"\noutput: html_document\n---\n\nGetting the financial data\n--------------------\nIn this lab, you will learn more about the analysis of stock returns by using the R packages PerformanceAnalytics, zoo and tseries (click them for more information).\nIn this first exercise, you will use the get.hist.quote function from the tseries package. The function allows you to download historical financial data over the web. The code on the right downloads the adjusted closing prices from the start of 1998 up to the end of 2009 from Yahoo! for the stocks with tickers VBLTX and FMAGX. The code further specifies that the data should be of the zoo class which is indexed by time. Since we deal with monthly data, it is a good idea to change the class of the time series index with the as.yearmon function\n```{r}\n# Load relevant packages\nlibrary(PerformanceAnalytics);library(zoo);library(tseries);\n\n# Get the monthly adjusted closing price data on VBLTX, FMAGX and SBUX from Yahoo! using the tseries function get.hist.quote(). Set the sample to Jan 1998 through Dec 2009.\n\n# Get the adjusted closing prices from Yahoo!\nVBLTX_prices = get.hist.quote(instrument=\"vbltx\", start=\"1998-01-01\",end=\"2009-12-31\", quote=\"AdjClose\",provider=\"yahoo\", origin=\"1970-01-01\",compression=\"m\", retclass=\"zoo\")\n\nFMAGX_prices = get.hist.quote(instrument=\"fmagx\", start=\"1998-01-01\",end=\"2009-12-31\", quote=\"AdjClose\",provider=\"yahoo\", origin=\"1970-01-01\",compression=\"m\", retclass=\"zoo\")\n\nSBUX_prices = get.hist.quote(instrument=\"sbux\", start=\"1998-01-01\",end=\"2009-12-31\", quote=\"AdjClose\",provider=\"yahoo\", origin=\"1970-01-01\",compression=\"m\", retclass=\"zoo\")\n\n# Change the class of the time index to yearmon which is appropriate for monthly data\n# index() and as.yearmon() are functions in the zoo package  \n\nindex(VBLTX_prices) = as.yearmon(index(VBLTX_prices))\nindex(FMAGX_prices)  = as.yearmon(index(FMAGX_prices))\nindex(SBUX_prices)   = as.yearmon(index(SBUX_prices))\n\n# Inspect your data\nstart(VBLTX_prices)\nend(VBLTX_prices) \n```\n\nCalculating the returns\n-------------------------\nIn the previous exercise, we obtained the price series for multiple stocks. It is convenient to store these time series in a single variable before we start the analysis. You will use the merge function to do that, since it merges series by column while taking into account the time index.\nRemember that the continuously compounded returns are defined as the difference between the log prices. Once all price series are merged by column, you can easily calculate the continuously compounded returns. Use the log function to calculate the log prices and apply the diff function to the object that contains the log prices to get the continuously compounded returns.\n```{r}\n# The variables VBLTX_prices, FMAGX_prices and SBUX_prices are preloaded in your workspace\n\n# Create merged price data\nall_prices = merge(VBLTX_prices,FMAGX_prices,SBUX_prices)\n# Rename columns\ncolnames(all_prices) = c(\"VBLTX\", \"FMAGX\", \"SBUX\")\n\n# Calculate cc returns as difference in log prices\nall_returns = diff(log(all_prices))\n\n# Look at the return data\nstart(all_returns)\nend(all_returns)\ncolnames(all_returns) \nhead(all_returns)\n```\nPlotting financial data with PerformanceAnalytics\n---------------------------------\nThe PerformanceAnalytics package implements a collection of econometric functions for performance and risk analysis. It contains - among other things - functionality to generate great plots of financial time series. You will use some of that functionality in this exercise. Find an overview of the plotting functionality in the package here.\nThe chart.TimeSeries function generates a line plot of (multiple) return series, which allows you to assess the volatility of different assets, for example. While this is nice, charts generated by chart.TimeSeries could be hard to read when you evaluate the returns. The PerformanceAnalytics function chart.Bar makes it easier to compare the returns of different assets on the same plot. Click 'Submit Answer' and use the arrows to compare the two plots. With all assets on the same scale, you see the lower volatility for the bond fund and the higher volatility for SBUX very clearly.\nLastly, have a look at the chart.CumReturns function which creates a cumulative return plot. It allows you to assess how a $1 investment in each asset evolved over time.\n```{r}\n# 'all_returns' is preloaded in your workspace.\n\n# Plot returns after using the PerformanceAnalytics function chart.TimeSeries().\n# This function creates a slightly nicer looking plot than plot.zoo()\nchart.TimeSeries(all_returns, legend.loc=\"bottom\", main=\" \") \n\n# The previous charts are a bit hard to read. The PerformanceAnalytics function\n# chart.Bar makes it easier to compare the returns of different assets on the \n# same plot\nchart.Bar(all_returns, legend.loc=\"bottom\", main=\" \")\n\n\n# Cumulative return plot - must use simple returns (!) and not cc returns for this\n# Use PerformanceAnalytics function chart.CumReturns()\nsimple_returns = diff(all_prices)/lag(all_prices, k=-1);\nchart.CumReturns(simple_returns,wealth.index=TRUE,legend.loc=\"topleft\",main=\"Future Value of $1 invested\")\n```\n\nCreate graphical summary for a return series\n---------------------------------------\nAs a first step, the code on the right extracts the \"core data\" from the \"all_returns\" variable and stores it in the matrix return_matrix. \"Extracting the core data\" in this case means stripping off the index/time attributes and returning only the observations. Secondly, the graphical window is subdivided into two rows and two columns with the par(mfrow=c(2,2,)) command. Finally, the code generates a histogram, boxplot, density and qqplot of the return data. This allows you to visually assess the symmetry of the return distribution, whether or not there are fat tails, outliers, etc.\n```{r}\n# Create matrix with returns\nreturn_matrix = coredata(all_returns);\n\n# Generate four panel plots\npar(mfrow=c(2,2))\nhist(return_matrix[,\"VBLTX\"],main=\"VBLTX monthly returns\",\n     xlab=\"VBLTX\", probability=T, col=\"slateblue1\")\nboxplot(return_matrix[,\"VBLTX\"],outchar=T, main=\"Boxplot\", col=\"slateblue1\")\nplot(density(return_matrix[,\"VBLTX\"]),type=\"l\", main=\"Smoothed density\",\n     xlab=\"monthly return\", ylab=\"density estimate\", col=\"slateblue1\")\nqqnorm(return_matrix[,\"VBLTX\"], col=\"slateblue1\")\nqqline(return_matrix[,\"VBLTX\"])\npar(mfrow=c(1,1))\n```\n\nReturn distribution comparison\n-----------------------------\nWhile the plot in the previous exercise allowed you to investigate the returns of a single stock, it is often of interest to compare several return series with each other. The code on the right does that by generating three boxplots that use the standard boxplot function from base R. While that is okay, the PerformanceAnalytics package offers you the more convenient chart.Boxplot function.\n```{r}\n# Create matrix with returns\nreturn_matrix = coredata(all_returns);\n\n# Show boxplot of three series on one plot\nboxplot(return_matrix[,\"VBLTX\"], return_matrix[,\"FMAGX\"], return_matrix[,\"SBUX\"],\n        names=colnames(return_matrix), col=\"slateblue1\")\n\n# Do the same thing using the PerformanceAnalytics function chart.Boxplot\nchart.Boxplot(all_returns)\n```\nCompute univariate descriptive statistics\n-----------------------\nHaving the returns in a matrix (return_matrix) allows you to compute several descriptive statistics for each return series with the apply function. The apply function takes three elements as input:\nAn array (in this case a matrix) on which you want to \"apply\" a certain function.\nThe subscripts which the function will be applied over. E.g. for a matrix 1 indicates rows, and 2 indicates columns.\nThe function to be applied. The code on the right computes for example the mean, the variance and the standard deviation for each return series.\nThe PerformanceAnalytics package offers you specific descriptive statistics that are useful for returns: e.g. skewness and kurtosis. Furthermore, the package offers one simple function, table.Stats, that takes the return series as input and returns a table with numerous useful descriptive statistics.\n```{r}\n# Note: all_returns is preloaded in your workspace\n\n# Create matrix with returns\nreturn_matrix = coredata(all_returns);\n\nsummary(return_matrix)\n\n# Compute descriptive statistics by column using the base R function apply()\nargs(apply)\napply(return_matrix, 2, mean)\napply(return_matrix, 2, var)\napply(return_matrix, 2, sd)\napply(return_matrix, 2, skewness)\napply(return_matrix, 2, kurtosis)\n# A nice PerformanceAnalytics function that computes all of the relevant descriptive statistics is table.Stats\ntable.Stats(all_returns)\n```\nAnnualized monthly estimates\n---------------------------------\nRemember that the returns in return_matrix were continuously compounded. Therefore, an estimate of the annual continuously compounded return is just 12 times the monthly continuously compounded return. An estimate of the continuously compounded annual standard deviation is the square root of 12 times the monthly standard deviation.\nFor the three assets we can use the apply function again to calculate their respective means and standard deviations, and then apply the correct transformation. Your task is to complete the code on the right. The calculation for the simple return is given to get you started!\n```{r}\n# Note: return_matrix is preloaded in your workspace\n\n# Annualized continuously compounded mean \n12*apply(return_matrix, 2, mean);\n\n# Annualized simple mean\nexp(12*apply(return_matrix, 2, mean)) - 1;\n\n# Annualized standard deviation values\nsqrt(12)*apply(return_matrix, 2, sd);\n```\nBivariate graphical analysis\n----------------------\nA graphical analysis can often help you to get a grasp on the co-movement between financial assets. The pairs function generates all possible pair-wise scatter plots between series.\nTo get a more formal grasp on the co-movement between assets, the covariance and correlation matrix of the returns can be computed by applying the var and cor on the return_matrix.\n```{r}\n# Note: return_matrix is preloaded in your workspace\n\n# Display all possible pair-wise scatter plots\n\npairs(return_matrix, col=\"slateblue1\", pch=16)\n\n\n# Compute 3 x 3 covariance and correlation matrices\nvar(return_matrix)\ncor(return_matrix)\n```\n\nQuestion 1\n------------------\n(10) Which of the following has the greatest volatility over the 1998 - 2009 time period?\n\n* Starbucks stock\n\nQuestion 2\n-------------------------\n(10) Which of the following was least affected by the crisis in 2008?\n* Vanguard long term bond index fund\n\nQuestion 3\n----------------\n(10) Which asset performed the worst over the investment horizon?\n* Fidelity Magellan stock mutual fund\n\nQuestion 4\n----------------------\n(12) Based on the panel plot you created for VBLTX, check all that apply.\n* Approximately symmetric\n* Fatter tails than normal distribution\n* Outliers\n\nQuestion 5\n------------------------\n(10) Based on the summary statistics, which asset is the most skewed?\n```{r}\napply(return_matrix, 2, skewness)\n```\n* Fidelity Magellan stock mutual fund\n\nQuestion 6\n---------------------------\n(10) What is the estimated annual standard deviation for Starbucks?\n```{r}\n# Annualized standard deviation values\nsqrt(12)*apply(return_matrix, 2, sd);\n```\n\nQuestion 7\n------------------\n\n(10) Which two assets show the strongest positive linear association?\n* FMAGX:SBUX\n\nQuestion 8\n------------------\n(10) Do the monthly cc returns for any of the assets\nappear to be correlated over time?\n* No",
    "created" : 1412162554962.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1858986361",
    "id" : "9857691A",
    "lastKnownWriteTime" : 1414971842,
    "path" : "~/GitHub/ComputationalFinanceandFinancialEconometrics/Assignment5/Assignment5_R.Rmd",
    "project_path" : "Assignment5_R.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}